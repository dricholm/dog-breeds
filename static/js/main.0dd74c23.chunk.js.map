{"version":3,"sources":["shared/fontAwesome.ts","components/Ui/Section/Section.tsx","components/About/About.tsx","components/Ui/ErrorMessage/ErrorMessage.tsx","components/Ui/Loading/Loading.tsx","components/BreedInfo/BreedGallery/BreedGallery.tsx","components/BreedInfo/SubBreeds/SubBreeds.tsx","components/Ui/ImageModal/ImageModal.tsx","shared/dogApi.ts","store/breed/actions.ts","store/breed/types.ts","containers/BreedInfo/reducers.ts","containers/BreedInfo/types.ts","containers/BreedInfo/BreedInfo.tsx","components/Form/Input/Input.tsx","components/BreedListLinks/BreedListLinks.tsx","containers/BreedList/BreedList.tsx","components/Ui/Footer/Footer.tsx","components/Ui/Nav/Nav.tsx","components/Quiz/QuizCheckboxes/QuizCheckboxes.tsx","components/Ui/ToggleHide/ToggleHide.tsx","store/quiz/actions.ts","containers/Quiz/QuizForm/reducers.ts","containers/Quiz/QuizForm/types.ts","containers/Quiz/QuizForm/QuizForm.tsx","store/quiz/types.ts","components/Quiz/AnswerButtons/AnswerButtons.tsx","components/Quiz/QuizImage/QuizImage.tsx","components/Quiz/QuizProgress/QuizProgress.tsx","containers/Quiz/QuizGame/QuizGame.tsx","components/Quiz/Quiz.tsx","App.tsx","serviceWorker.js","store/breed/reducers.ts","store/quiz/reducers.ts","store/index.ts","index.tsx"],"names":["library","add","faChevronLeft","faChevronRight","faSync","Section","props","className","children","About","href","ErrorMessage","role","message","Loading","aria-label","BreedGallery","imageError","isLoading","imageUrls","length","images","map","val","idx","key","height","offset","once","src","alt","title","onClick","selectImage","loader","loadMore","hasMore","threshold","defaultProps","SubBreeds","subs","sort","a","b","localeCompare","sensitivity","to","main","Fragment","ImageModal","useEffect","document","addEventListener","keyUp","removeEventListener","event","keyCode","onClose","hasPrev","onChange","hasNext","image","icon","fixedWidth","host","fetchBreedList","fetch","response","ok","Error","statusText","json","data","fetchImages","breed","sub","path","fetchRandomImage","getBreeds","dispatch","type","breeds","payload","errorMessage","initialState","breedNames","currentBreed","error","loading","loadingImages","numberOfImagesLoaded","selectedImage","breedInfoReducer","state","action","imageIndex","delta","BreedInfo","useReducer","useParams","useSelector","breedFound","indexOf","replace","breedsLoaded","reduxDispatch","useDispatch","dispatchGetBreeds","useCallback","shouldLoad","shuffle","array","ret","slice","i","j","Math","floor","random","getImages","setImage","top","Input","elementType","elementConfig","placeholder","label","checkboxClasses","checked","push","htmlFor","join","style","margin","id","BreedListLinks","breedList","split","link","BreedList","useState","filter","setFilter","filtered","toLowerCase","includes","autoFocus","target","value","Footer","Nav","active","setActive","toggleMenu","menuClasses","burgerClasses","activeClassName","exact","aria-expanded","QuizCheckboxes","initial","checkboxes","Object","keys","separator","charAt","changeValue","ToggleHide","shown","click","getRandomAnswers","selectedBreeds","answerCount","min","answers","isValid","questions","max","name","required","touched","showCheckboxes","quizFormReducer","questionNumber","console","QuizForm","history","useHistory","breedActions","forEach","initCheckboxes","breedCheckboxes","checkAll","checkBoxesClasses","checkedCount","onSubmit","preventDefault","box","Number","questionCount","quizActions","AnswerButtons","choices","classNames","chosenAnswer","correctAnswer","QuizImage","overlay","chosen","button","gameEnd","ratio","round","correct","wrong","restart","nextQuestion","backgroundImage","QuizProgress","progress","correctClasses","wrongClasses","wasCorrect","toString","QuizGame","quiz","dispatchNextQuestion","splitAnswer","imageUrl","restartQuiz","numberOfCorrect","numberOfWrong","answer","dispatchAnswer","Quiz","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","composeEnhancers","compose","createStore","applyMiddleware","thunk","configureStore","app","basename","process","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dd74c23.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faSync,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faChevronLeft);\nlibrary.add(faChevronRight);\nlibrary.add(faSync);\n","import React, { FunctionComponent } from 'react';\n\ninterface SectionProps {\n  children: any;\n}\n\nconst Section: FunctionComponent<SectionProps> = (props: SectionProps) => (\n  <section className=\"section\">\n    <div className=\"container\">{props.children}</div>\n  </section>\n);\n\nexport default Section;\n","import React, { FunctionComponent } from 'react';\nimport Section from '../Ui/Section/Section';\n\nconst About: FunctionComponent = () => (\n  <Section>\n    <h1 className=\"title is-capitalized\">About</h1>\n\n    <div className=\"content is-size-5\">\n      <p>\n        This is an open source website made in React. It uses the{' '}\n        <a href=\"https://dog.ceo/dog-api/\">Dog API</a> for fetching breed names\n        and images.\n      </p>\n      <p>\n        You can find the source code on{' '}\n        <a href=\"https://github.com/dricholm/dog-breeds\">GitHub</a>. Feel free\n        to add issues if you found some. Forks and improvements are also\n        welcome.\n      </p>\n    </div>\n  </Section>\n);\n\nexport default About;\n","import React, { FunctionComponent } from 'react';\n\nexport interface ErrorMessageProps {\n  message: string;\n}\n\nconst ErrorMessage: FunctionComponent<ErrorMessageProps> = (\n  props: ErrorMessageProps\n) => (\n  <div className=\"notification is-danger is-size-5\" role=\"alert\">\n    {props.message}\n  </div>\n);\n\nexport default ErrorMessage;\n","import React from 'react';\n\nimport './Loading.scss';\n\nconst Loading = () => (\n  <div className=\"dog-loader\" aria-label=\"Loading\">\n    <div className=\"ears\" />\n    <div className=\"body\">\n      <div className=\"eyebrows\" />\n      <div className=\"eyes\" />\n      <div className=\"snout\">\n        <div className=\"nose\" />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import React, { FunctionComponent } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport LazyLoad from 'react-lazyload';\nimport ErrorMessage from '../../Ui/ErrorMessage/ErrorMessage';\nimport Loading from '../../Ui/Loading/Loading';\nimport './BreedGallery.scss';\n\nexport interface BreedGalleryProps {\n  hasMore?: boolean;\n  imageError?: string;\n  imageUrls?: Array<string>;\n  isLoading?: boolean;\n  loadMore: () => void;\n  selectImage: (index: number) => void;\n  title?: string;\n}\n\nconst BreedGallery: FunctionComponent<BreedGalleryProps> = (\n  props: BreedGalleryProps\n) => {\n  if (props.imageError) {\n    return <ErrorMessage message={props.imageError} />;\n  } else if (props.isLoading) {\n    return <Loading />;\n  } else if (props.imageUrls.length > 0) {\n    const images = props.imageUrls.map((val, idx) => (\n      <div className=\"gallery-image\" key={idx}>\n        <LazyLoad height={200} offset={500} once>\n          <img\n            src={val}\n            alt={`${props.title} #${idx + 1}`}\n            onClick={() => props.selectImage(idx)}\n          />\n        </LazyLoad>\n      </div>\n    ));\n\n    return (\n      <InfiniteScroll\n        className=\"gallery-container\"\n        loader={\n          <div className=\"notification\" key=\"loader\">\n            Loading more images...\n          </div>\n        }\n        loadMore={props.loadMore}\n        hasMore={props.hasMore}\n        threshold={1000}\n      >\n        {images}\n      </InfiniteScroll>\n    );\n  } else {\n    return null;\n  }\n};\n\nBreedGallery.defaultProps = {\n  imageUrls: [],\n};\n\nexport default BreedGallery;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface SubBreedsProps {\n  main: string;\n  subs: Array<string>;\n}\n\nconst SubBreeds: FunctionComponent<SubBreedsProps> = (\n  props: SubBreedsProps\n) => {\n  const subs = props.subs\n    .sort((a, b) => a.localeCompare(b, 'en', { sensitivity: 'base' }))\n    .map(val => (\n      <li key={val}>\n        <Link to={`/breed/${props.main}/${val}`}>\n          {val} {props.main}\n        </Link>\n      </li>\n    ));\n\n  return (\n    <React.Fragment>\n      <h2 className=\"title is-size-4\">Sub breeds</h2>\n      <ul className=\"is-size-5 is-capitalized\">{subs}</ul>\n    </React.Fragment>\n  );\n};\n\nSubBreeds.defaultProps = {\n  subs: [],\n};\n\nexport default SubBreeds;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { FunctionComponent, useEffect } from 'react';\nimport './ImageModal.scss';\n\ninterface ImageModalProps {\n  hasNext?: boolean;\n  hasPrev?: boolean;\n  onChange: (direction: number) => void;\n  onClose: () => void;\n  src: string;\n  alt?: string;\n}\n\nconst ImageModal: FunctionComponent<ImageModalProps> = (\n  props: ImageModalProps\n) => {\n  useEffect(() => {\n    document.addEventListener('keyup', keyUp);\n\n    return () => {\n      document.removeEventListener('keyup', keyUp);\n    };\n  });\n\n  const keyUp = (event: KeyboardEvent) => {\n    switch (event.keyCode) {\n      case 27: // Escape\n        props.onClose();\n        break;\n\n      case 37: // Left\n        if (props.hasPrev) {\n          props.onChange(-1);\n        }\n        break;\n\n      case 39: // Right\n        if (props.hasNext) {\n          props.onChange(1);\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const image = [0].map(() => (\n    <img\n      className=\"modal-image\"\n      src={props.src}\n      alt={props.alt}\n      key={props.src}\n    />\n  ));\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={props.onClose} />\n      {image}\n      <button\n        className=\"modal-close is-large\"\n        aria-label=\"Close\"\n        onClick={props.onClose}\n      />\n      {props.hasPrev ? (\n        <button\n          className=\"button is-large is-dark modal-prev\"\n          aria-label=\"Previous\"\n          onClick={() => props.onChange(-1)}\n        >\n          <FontAwesomeIcon icon=\"chevron-left\" fixedWidth />\n        </button>\n      ) : null}\n      {props.hasNext ? (\n        <button\n          className=\"button is-large is-dark modal-next\"\n          aria-label=\"Next\"\n          onClick={() => props.onChange(1)}\n        >\n          <FontAwesomeIcon icon=\"chevron-right\" fixedWidth />\n        </button>\n      ) : null}\n    </div>\n  );\n};\n\nImageModal.defaultProps = {\n  hasNext: false,\n  hasPrev: false,\n  alt: 'Large version',\n};\n\nexport default ImageModal;\n","const host = 'https://dog.ceo/api';\n\ninterface DogApiResponse {\n  message: any;\n  status: string;\n}\n\nconst fetchBreedList = async (): Promise<{ [breed: string]: string[] }> => {\n  const response = await fetch(`${host}/breeds/list/all`);\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const data: DogApiResponse = await response.json();\n  return data.message;\n};\n\nconst fetchImages = async (breed: string, sub: string): Promise<string[]> => {\n  const path =\n    sub == null ? `breed/${breed}/images` : `breed/${breed}/${sub}/images`;\n\n  const response = await fetch(`${host}/${path}`);\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const data: DogApiResponse = await response.json();\n  return data.message;\n};\n\nconst fetchRandomImage = async (\n  breed: string,\n  sub: string\n): Promise<string> => {\n  const path =\n    sub == null\n      ? `breed/${breed}/images/random`\n      : `breed/${breed}/${sub}/images/random`;\n\n  const response = await fetch(`${host}/${path}`);\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  const data: DogApiResponse = await response.json();\n  return data.message;\n};\n\nexport { fetchBreedList, fetchImages, fetchRandomImage };\n","import { fetchBreedList } from '../../shared/dogApi';\nimport {\n  BreedActionTypes,\n  GET_BREEDS,\n  GET_BREEDS_FAIL,\n  GET_BREEDS_SUCCESS,\n} from './types';\n\nexport const getBreeds = () => {\n  return async (dispatch: (action: BreedActionTypes) => void) => {\n    dispatch({ type: GET_BREEDS });\n\n    try {\n      const breeds = await fetchBreedList();\n\n      dispatch({\n        payload: {\n          breeds,\n        },\n        type: GET_BREEDS_SUCCESS,\n      });\n    } catch (err) {\n      dispatch({\n        payload: {\n          errorMessage: 'A network error has occured',\n        },\n        type: GET_BREEDS_FAIL,\n      });\n    }\n  };\n};\n","export interface BreedState {\n  breedNames: Array<string>;\n  breeds: { [breed: string]: Array<string> };\n  error: string;\n  loading: boolean;\n}\n\nexport const initialBreedState: BreedState = {\n  breedNames: [],\n  breeds: {},\n  error: null,\n  loading: null,\n};\n\nexport const GET_BREEDS = 'GET_BREEDS';\nexport const GET_BREEDS_SUCCESS = 'GET_BREEDS_SUCCESS';\nexport const GET_BREEDS_FAIL = 'GET_BREEDS_FAIL';\n\ninterface GetBreedsAction {\n  type: typeof GET_BREEDS;\n}\n\ninterface GetBreedsSuccessAction {\n  type: typeof GET_BREEDS_SUCCESS;\n  payload: {\n    breeds: { [breed: string]: Array<string> };\n  };\n}\n\ninterface GetBreedsFailAction {\n  type: typeof GET_BREEDS_FAIL;\n  payload: {\n    errorMessage: string;\n  };\n}\n\nexport type BreedActionTypes =\n  | GetBreedsAction\n  | GetBreedsSuccessAction\n  | GetBreedsFailAction;\n","import {\n  BreedInfoActionTypes,\n  BreedInfoState,\n  CHANGE_IMAGE,\n  INIT_REQUEST,\n  LOAD_MORE_IMAGES,\n  SELECT_IMAGE,\n  SET_ERROR,\n  SET_IMAGES,\n} from './types';\n\nexport const initialState: BreedInfoState = {\n  breedNames: [],\n  breeds: {},\n  currentBreed: {},\n  error: null,\n  imageError: null,\n  imageUrls: [],\n  loading: null,\n  loadingImages: null,\n  numberOfImagesLoaded: null,\n  selectedImage: null,\n};\n\nexport const breedInfoReducer: (\n  state: BreedInfoState,\n  action: BreedInfoActionTypes\n) => BreedInfoState = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_REQUEST:\n      return {\n        ...state,\n        currentBreed: {\n          main: action.payload.breed,\n          sub: action.payload.sub,\n        },\n        imageError: null,\n        imageUrls: [],\n        loadingImages: true,\n        numberOfImagesLoaded: 0,\n      };\n\n    case SET_IMAGES:\n      return {\n        ...state,\n        currentBreed: { ...state.currentBreed },\n        imageError: null,\n        imageUrls: action.payload.imageUrls,\n        loadingImages: false,\n        numberOfImagesLoaded: 10,\n      };\n\n    case SET_ERROR:\n      return {\n        ...state,\n        currentBreed: { ...state.currentBreed },\n        imageError: action.payload.errorMessage,\n        imageUrls: [],\n        loadingImages: false,\n      };\n\n    case LOAD_MORE_IMAGES:\n      return {\n        ...state,\n        currentBreed: { ...state.currentBreed },\n        numberOfImagesLoaded: state.numberOfImagesLoaded + 10,\n      };\n\n    case SELECT_IMAGE:\n      return {\n        ...state,\n        currentBreed: { ...state.currentBreed },\n        selectedImage: action.payload.imageIndex,\n      };\n\n    case CHANGE_IMAGE:\n      return {\n        ...state,\n        currentBreed: { ...state.currentBreed },\n        numberOfImagesLoaded:\n          state.selectedImage + action.payload.delta >=\n          state.numberOfImagesLoaded\n            ? state.selectedImage + action.payload.delta + 1\n            : state.numberOfImagesLoaded,\n        selectedImage: state.selectedImage + action.payload.delta,\n      };\n\n    default:\n      return state;\n  }\n};\n","export interface BreedInfoState {\n  breedNames: Array<string>;\n  breeds: { [breed: string]: Array<string> };\n  currentBreed: { main?: string; sub?: string };\n  error: string;\n  imageError: string;\n  imageUrls: Array<string>;\n  loading: boolean;\n  loadingImages: boolean;\n  numberOfImagesLoaded: number;\n  selectedImage: number;\n}\n\nexport const INIT_REQUEST = 'INIT_REQUEST';\nexport const SET_IMAGES = 'SET_IMAGES';\nexport const SET_ERROR = 'SET_ERROR';\nexport const LOAD_MORE_IMAGES = 'LOAD_MORE_IMAGES';\nexport const SELECT_IMAGE = 'SELECT_IMAGE';\nexport const CHANGE_IMAGE = 'CHANGE_IMAGE';\n\ninterface InitRequestAction {\n  type: typeof INIT_REQUEST;\n  payload: {\n    breed: string;\n    sub: string;\n  };\n}\n\ninterface SetImagesAction {\n  type: typeof SET_IMAGES;\n  payload: {\n    imageUrls: Array<string>;\n  };\n}\n\ninterface SetErrorAction {\n  type: typeof SET_ERROR;\n  payload: {\n    errorMessage: string;\n  };\n}\n\ninterface LoadMoreImagesAction {\n  type: typeof LOAD_MORE_IMAGES;\n}\n\ninterface SelectImageAction {\n  type: typeof SELECT_IMAGE;\n  payload: {\n    imageIndex: number;\n  };\n}\n\ninterface ChangeImageAction {\n  type: typeof CHANGE_IMAGE;\n  payload: {\n    delta: number;\n  };\n}\n\nexport type BreedInfoActionTypes =\n  | InitRequestAction\n  | SetImagesAction\n  | SetErrorAction\n  | LoadMoreImagesAction\n  | SelectImageAction\n  | ChangeImageAction;\n","import React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useReducer,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport BreedGallery from '../../components/BreedInfo/BreedGallery/BreedGallery';\nimport SubBreeds from '../../components/BreedInfo/SubBreeds/SubBreeds';\nimport ErrorMessage from '../../components/Ui/ErrorMessage/ErrorMessage';\nimport ImageModal from '../../components/Ui/ImageModal/ImageModal';\nimport Loading from '../../components/Ui/Loading/Loading';\nimport Section from '../../components/Ui/Section/Section';\nimport { fetchImages } from '../../shared/dogApi';\nimport { AppState } from '../../store';\nimport { getBreeds } from '../../store/breed/actions';\nimport { breedInfoReducer, initialState } from './reducers';\n\nconst BreedInfo: FunctionComponent = () => {\n  const [state, dispatch] = useReducer(breedInfoReducer, initialState);\n\n  const { breed, sub } = useParams<{ breed: string; sub: string }>();\n\n  const { breeds, breedNames, error, loading } = useSelector(\n    (state: AppState) => state.breeds\n  );\n\n  const breedFound =\n    breeds[breed] &&\n    (!sub || breeds[breed].indexOf(sub.replace(/-/g, ' ')) > -1);\n  const breedsLoaded = breedNames.length > 0;\n\n  const reduxDispatch = useDispatch();\n  const dispatchGetBreeds = useCallback(() => reduxDispatch(getBreeds()), [\n    reduxDispatch,\n  ]);\n\n  const shouldLoad =\n    (breedsLoaded && state.currentBreed.main !== breed) ||\n    state.currentBreed.sub !== sub ||\n    (state.imageUrls.length === 0 && !state.imageError && !state.loadingImages);\n\n  useEffect(() => {\n    const shuffle: (array: Array<string>) => Array<string> = (\n      array: Array<string>\n    ) => {\n      const ret = array.slice();\n      for (let i = ret.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [ret[i], ret[j]] = [ret[j], ret[i]];\n      }\n      return ret;\n    };\n\n    const getImages: () => Promise<void> = async () => {\n      dispatch({ type: 'INIT_REQUEST', payload: { breed, sub } });\n\n      try {\n        const images = await fetchImages(breed, sub);\n\n        dispatch({\n          type: 'SET_IMAGES',\n          payload: { imageUrls: shuffle(images) },\n        });\n      } catch (e) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: { errorMessage: 'Network error' },\n        });\n      }\n    };\n\n    if (breedsLoaded) {\n      if (shouldLoad) {\n        getImages();\n      }\n    } else {\n      dispatchGetBreeds();\n    }\n  }, [breedsLoaded, dispatchGetBreeds, breed, sub, shouldLoad]);\n\n  const loadMore = () => {\n    dispatch({ type: 'LOAD_MORE_IMAGES' });\n  };\n\n  const setImage = (imageIndex: number) => {\n    dispatch({ type: 'SELECT_IMAGE', payload: { imageIndex } });\n  };\n\n  const changeImage = (delta: number) => {\n    dispatch({ type: 'CHANGE_IMAGE', payload: { delta } });\n  };\n\n  const getTop: () => JSX.Element = () => {\n    if (sub) {\n      return (\n        <h2 className=\"subtitle is-capitalized\">\n          Breed: <Link to={`/breed/${breed}`}>{breed}</Link>\n        </h2>\n      );\n    } else if (breeds[breed].length > 0) {\n      return <SubBreeds main={breed} subs={breeds[breed]} />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Section>\n        <Loading />\n      </Section>\n    );\n  } else if (error) {\n    return (\n      <Section>\n        <ErrorMessage message={error} />\n      </Section>\n    );\n  } else if (breedFound) {\n    const top: JSX.Element = getTop();\n\n    const title = sub ? sub.replace(/-/g, ' ') + ' ' + breed : breed;\n\n    return (\n      <Section>\n        <React.Fragment>\n          <h1 className=\"title is-capitalized\">{title}</h1>\n          {top}\n\n          <hr />\n\n          <h2 className=\"title is-size-4\">Images</h2>\n          <BreedGallery\n            hasMore={state.numberOfImagesLoaded < state.imageUrls.length}\n            imageError={state.imageError}\n            imageUrls={state.imageUrls.slice(0, state.numberOfImagesLoaded)}\n            isLoading={state.loadingImages}\n            loadMore={loadMore}\n            title={title}\n            selectImage={setImage}\n          />\n          {state.selectedImage !== null ? (\n            <ImageModal\n              src={state.imageUrls[state.selectedImage]}\n              onClose={() => setImage(null)}\n              hasPrev={state.selectedImage > 0}\n              hasNext={state.selectedImage < state.imageUrls.length - 1}\n              onChange={changeImage}\n            />\n          ) : null}\n        </React.Fragment>\n      </Section>\n    );\n  }\n\n  return (\n    <Section>\n      <ErrorMessage message=\"Breed not found\" />\n    </Section>\n  );\n};\n\nexport default BreedInfo;\n","import React, { FunctionComponent } from 'react';\n\nexport interface InputProps {\n  elementConfig: any;\n  elementType: string;\n  label?: string;\n  touched?: boolean;\n}\n\nconst Input: FunctionComponent<InputProps> = (props: InputProps) => {\n  switch (props.elementType) {\n    case 'input':\n      return (\n        <input\n          className=\"input\"\n          title={props.elementConfig.placeholder}\n          aria-label={props.label}\n          {...props.elementConfig}\n        />\n      );\n\n    case 'checkbox': {\n      const checkboxClasses = [\n        'checkbox',\n        'is-capitalized',\n        'is-medium',\n        'tag',\n      ];\n      if (\n        typeof props.elementConfig != 'undefined' &&\n        props.elementConfig.checked\n      ) {\n        checkboxClasses.push('is-info');\n      }\n      return (\n        <label\n          htmlFor={props.label}\n          className={checkboxClasses.join(' ')}\n          style={{ margin: '0.3em' }}\n        >\n          <input\n            id={props.label}\n            title={props.label}\n            {...props.elementConfig}\n            type=\"checkbox\"\n          />\n          &nbsp;\n          {props.label}\n        </label>\n      );\n    }\n\n    default:\n      return null;\n  }\n};\n\nexport default Input;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ErrorMessage from '../Ui/ErrorMessage/ErrorMessage';\n\nexport interface BreedListLinksProps {\n  breeds?: Array<string>;\n}\n\nconst BreedListLinks: FunctionComponent<BreedListLinksProps> = (\n  props: BreedListLinksProps\n) => {\n  if (props.breeds?.length === 0) {\n    return <ErrorMessage message=\"No breeds matched the filter\" />;\n  }\n\n  const breedList = props.breeds.map(val => {\n    const split = val.split(' ');\n    const sub =\n      split.length > 1 ? split.slice(0, split.length - 1).join('-') : null;\n    const link = sub\n      ? '/breed/' + split[split.length - 1] + '/' + sub\n      : '/breed/' + split[split.length - 1];\n    return (\n      <li key={val}>\n        <Link to={link}>{val}</Link>\n      </li>\n    );\n  });\n\n  return <ul className=\"is-size-5 is-capitalized\">{breedList}</ul>;\n};\n\nBreedListLinks.defaultProps = {\n  breeds: [],\n};\n\nexport default BreedListLinks;\n","import React, {\n  FunctionComponent,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './BreedList.scss';\nimport ErrorMessage from '../../components/Ui/ErrorMessage/ErrorMessage';\nimport Input from '../../components/Form/Input/Input';\nimport Loading from '../../components/Ui/Loading/Loading';\nimport Section from '../../components/Ui/Section/Section';\nimport BreedListLinks from '../../components/BreedListLinks/BreedListLinks';\nimport { getBreeds } from '../../store/breed/actions';\nimport { AppState } from '../../store';\n\nconst BreedList: FunctionComponent = () => {\n  const { breedNames, error, loading } = useSelector(\n    (state: AppState) => state.breeds\n  );\n  const dispatch = useDispatch();\n  const dispatchGetBreeds = useCallback(() => dispatch(getBreeds()), [\n    dispatch,\n  ]);\n\n  const [filter, setFilter] = useState('');\n\n  const breedsLoaded = breedNames.length > 0;\n\n  useEffect(() => {\n    if (breedsLoaded) {\n      return;\n    }\n    dispatchGetBreeds();\n  }, [breedsLoaded, dispatchGetBreeds]);\n\n  const onFilter: (event: React.ChangeEvent<HTMLInputElement>) => void = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setFilter(event.target.value);\n  };\n\n  if (breedNames) {\n    const filtered = breedNames.filter(breed =>\n      breed.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    if (loading) {\n      return (\n        <Section>\n          <Loading />\n        </Section>\n      );\n    } else if (error) {\n      return (\n        <Section>\n          <ErrorMessage message={error} />\n        </Section>\n      );\n    } else {\n      return (\n        <Section>\n          <React.Fragment>\n            <div className=\"field\">\n              <div className=\"control\">\n                <Input\n                  elementConfig={{\n                    autoFocus: true,\n                    className: 'input is-info is-medium',\n                    onChange: onFilter,\n                    placeholder: 'Filter breeds',\n                    type: 'text',\n                  }}\n                  label=\"Filter breeds\"\n                  elementType=\"input\"\n                />\n              </div>\n            </div>\n\n            <BreedListLinks breeds={filtered} />\n          </React.Fragment>\n        </Section>\n      );\n    }\n  } else {\n    return (\n      <Section>\n        <ErrorMessage message=\"No breeds found\" />\n      </Section>\n    );\n  }\n};\n\nexport default BreedList;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer: FunctionComponent = () => (\n  <footer className=\"footer\">\n    <div className=\"container\">\n      <div className=\"content has-text-centered\">\n        <p>\n          Open source project on{' '}\n          <a href=\"https://github.com/dricholm/dog-breeds\">GitHub</a>\n        </p>\n        <p>\n          <Link to=\"/about\">About</Link>\n        </p>\n      </div>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React, { FunctionComponent, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Nav: FunctionComponent = () => {\n  const [active, setActive] = useState(false);\n\n  const toggleMenu = () => {\n    setActive(!active);\n  };\n\n  const menuClasses = ['navbar-menu'];\n  const burgerClasses = ['navbar-burger', 'burger'];\n\n  if (active) {\n    menuClasses.push('is-active');\n    burgerClasses.push('is-active');\n  }\n\n  return (\n    <nav className=\"navbar is-link\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand has-text-weight-semibold is-uppercase\">\n        <NavLink\n          activeClassName=\"is-active\"\n          className=\"navbar-item\"\n          exact\n          to=\"/\"\n        >\n          Dog breeds\n        </NavLink>\n\n        <div\n          role=\"button\"\n          className={burgerClasses.join(' ')}\n          onClick={toggleMenu}\n          aria-label=\"Menu\"\n          aria-expanded={active}\n        >\n          <span />\n          <span />\n          <span />\n        </div>\n      </div>\n\n      <div className={menuClasses.join(' ')}>\n        <div className=\"navbar-start\">\n          <NavLink\n            activeClassName=\"is-active\"\n            className=\"navbar-item\"\n            onClick={toggleMenu}\n            to=\"/quiz\"\n          >\n            Quiz\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React, { FunctionComponent } from 'react';\nimport Input from '../../Form/Input/Input';\n\ninterface QuizCheckboxesProps {\n  checkboxes: { [breed: string]: boolean };\n  changeValue: (breed: string, value: boolean) => void;\n}\n\nconst QuizCheckboxes: FunctionComponent<QuizCheckboxesProps> = (\n  props: QuizCheckboxesProps\n) => {\n  let initial: string;\n\n  const checkboxes = Object.keys(props.checkboxes).map((breed: string) => {\n    let separator = null;\n    if (initial !== breed.charAt(0)) {\n      initial = breed.charAt(0);\n      separator = (\n        <React.Fragment>\n          <p className=\"label is-capitalized\">{initial}</p>\n        </React.Fragment>\n      );\n    }\n\n    const key = breed.replace(/ /g, '-');\n\n    const elementConfig = {\n      checked: props.checkboxes[key],\n      onChange: (event: React.ChangeEvent<HTMLInputElement>) =>\n        props.changeValue(key, event.target.checked),\n    };\n\n    return (\n      <React.Fragment key={key}>\n        {separator}\n        <Input\n          elementType=\"checkbox\"\n          elementConfig={elementConfig}\n          label={breed}\n        />\n      </React.Fragment>\n    );\n  });\n\n  return <React.Fragment>{checkboxes}</React.Fragment>;\n};\n\nexport default QuizCheckboxes;\n","import React, { FunctionComponent } from 'react';\n\ninterface ToggleHideProps {\n  click: () => void;\n  shown: boolean;\n}\n\nconst ToggleHide: FunctionComponent<ToggleHideProps &\n  React.HTMLAttributes<HTMLButtonElement>> = (\n  props: ToggleHideProps & React.HTMLAttributes<HTMLButtonElement>\n) => (\n  <button\n    className={props.shown ? 'button is-light' : 'button is-primary'}\n    type=\"button\"\n    onClick={props.click}\n  >\n    {props.shown ? 'Hide' : 'Show'}\n  </button>\n);\n\nexport default ToggleHide;\n","import { fetchRandomImage } from '../../shared/dogApi';\nimport {\n  ANSWER,\n  NEXT_QUESTION,\n  NEXT_QUESTION_FAIL,\n  NEXT_QUESTION_SUCCESS,\n  QuizActionTypes,\n  RESTART,\n  SET_OPTIONS,\n} from './types';\n\nconst getRandomAnswers = (selectedBreeds: Array<string>): string[] => {\n  const answerCount = Math.min(4, selectedBreeds.length);\n  let answers: string[] = [];\n  while (answers.length < answerCount) {\n    const idx = Math.floor(Math.random() * selectedBreeds.length);\n    if (answers.indexOf(selectedBreeds[idx].toLowerCase()) === -1) {\n      answers.push(selectedBreeds[idx].toLowerCase());\n    }\n  }\n  return answers;\n};\n\nexport const setOptions = (\n  questionCount: number,\n  selectedBreeds: Array<string>\n) => ({\n  payload: {\n    questionCount,\n    selectedBreeds: selectedBreeds,\n  },\n  type: SET_OPTIONS,\n});\n\nexport const nextQuestion = (selectedBreeds: Array<string>) => {\n  return async (dispatch: (action: QuizActionTypes) => void) => {\n    dispatch({ type: NEXT_QUESTION });\n\n    const choices = getRandomAnswers(selectedBreeds);\n    const correctAnswer = choices[Math.floor(Math.random() * choices.length)];\n    const splitAnswer = correctAnswer.split('-');\n    const breed = splitAnswer[splitAnswer.length - 1];\n    const sub =\n      splitAnswer.length === 1\n        ? null\n        : splitAnswer.slice(0, splitAnswer.length - 1).join(' ');\n\n    try {\n      const imageUrl = await fetchRandomImage(breed, sub);\n      dispatch({\n        payload: {\n          choices: choices,\n          correctAnswer: correctAnswer,\n          imageUrl,\n        },\n        type: NEXT_QUESTION_SUCCESS,\n      });\n    } catch (err) {\n      dispatch({\n        payload: {\n          errorMessage: 'Network error',\n        },\n        type: NEXT_QUESTION_FAIL,\n      });\n    }\n  };\n};\n\nexport const answer = (answer: string) => ({\n  payload: {\n    answer: answer,\n  },\n  type: ANSWER,\n});\n\nexport const restart = () => ({\n  type: RESTART,\n});\n","import {\n  QuizFormState,\n  QuizFormActionTypes,\n  SET_CHECKBOXES,\n  SET_QUESTION_NUMBER,\n  SET_CHECKBOX_MARK,\n  SET_INVALID,\n  TOGGLE_HIDE,\n} from './types';\n\nexport const initialState: QuizFormState = {\n  checkboxes: {},\n  isValid: true,\n  questions: {\n    elementConfig: {\n      max: '100',\n      min: '1',\n      name: 'questions',\n      placeholder: '1-100',\n      required: true,\n      type: 'number',\n      value: '20',\n    },\n    elementType: 'input',\n    touched: false,\n  },\n  showCheckboxes: false,\n};\n\nexport const quizFormReducer: (\n  state: QuizFormState,\n  action: QuizFormActionTypes\n) => QuizFormState = (state, action) => {\n  switch (action.type) {\n    case SET_CHECKBOXES:\n      return {\n        ...state,\n        checkboxes: action.payload.checkboxes,\n      };\n\n    case SET_QUESTION_NUMBER:\n      return {\n        ...state,\n        questions: {\n          ...state.questions,\n          elementConfig: {\n            ...state.questions.elementConfig,\n            value: action.payload.questionNumber,\n          },\n          touched: true,\n        },\n      };\n\n    case SET_CHECKBOX_MARK:\n      return {\n        ...state,\n        checkboxes: {\n          ...state.checkboxes,\n          [action.payload.breed]: action.payload.value,\n        },\n      };\n\n    case SET_INVALID:\n      return {\n        ...state,\n        isValid: false,\n      };\n\n    case TOGGLE_HIDE:\n      return {\n        ...state,\n        showCheckboxes: !state.showCheckboxes,\n      };\n\n    default:\n      console.error('Invalid QuizFormAction type', action);\n      return state;\n  }\n};\n","export interface QuizFormState {\n  checkboxes: { [name: string]: boolean };\n  isValid: boolean;\n  questions: {\n    elementConfig: {\n      max: string;\n      min: string;\n      name: string;\n      placeholder: string;\n      required: boolean;\n      type: string;\n      value: string;\n    };\n    elementType: string;\n    touched: boolean;\n  };\n  showCheckboxes: boolean;\n}\n\nexport const SET_CHECKBOXES = 'SET_CHECKBOXES';\nexport const SET_QUESTION_NUMBER = 'SET_QUESTION_NUMBER';\nexport const SET_CHECKBOX_MARK = 'SET_CHECKBOX_MARK';\nexport const SET_INVALID = 'SET_INVALID';\nexport const TOGGLE_HIDE = 'TOGGLE_HIDE';\n\ninterface SetCheckboxesAction {\n  type: typeof SET_CHECKBOXES;\n  payload: {\n    checkboxes: { [name: string]: boolean };\n  };\n}\n\ninterface SetQuestionNumberAction {\n  type: typeof SET_QUESTION_NUMBER;\n  payload: {\n    questionNumber: string;\n  };\n}\n\ninterface SetCheckboxMarkAction {\n  type: typeof SET_CHECKBOX_MARK;\n  payload: {\n    breed: string;\n    value: boolean;\n  };\n}\n\ninterface SetInvalidAction {\n  type: typeof SET_INVALID;\n}\n\ninterface ToggleHideAction {\n  type: typeof TOGGLE_HIDE;\n}\n\nexport type QuizFormActionTypes =\n  | SetCheckboxesAction\n  | SetQuestionNumberAction\n  | SetCheckboxMarkAction\n  | SetInvalidAction\n  | ToggleHideAction;\n","import React, {\n  FormEvent,\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useReducer,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport Input from '../../../components/Form/Input/Input';\nimport QuizCheckboxes from '../../../components/Quiz/QuizCheckboxes/QuizCheckboxes';\nimport ErrorMessage from '../../../components/Ui/ErrorMessage/ErrorMessage';\nimport Loading from '../../../components/Ui/Loading/Loading';\nimport ToggleHide from '../../../components/Ui/ToggleHide/ToggleHide';\nimport { AppState } from '../../../store';\nimport * as breedActions from '../../../store/breed/actions';\nimport * as quizActions from '../../../store/quiz/actions';\nimport { initialState, quizFormReducer } from './reducers';\n\nconst QuizForm: FunctionComponent = () => {\n  const breeds = useSelector((state: AppState) => state.breeds);\n\n  const history = useHistory();\n\n  const reduxDispatch = useDispatch();\n  const getBreeds = useCallback(() => reduxDispatch(breedActions.getBreeds()), [\n    reduxDispatch,\n  ]);\n  const setOptions = (questionNumber: number, selectedBreeds: Array<string>) =>\n    reduxDispatch(quizActions.setOptions(questionNumber, selectedBreeds));\n\n  const [state, dispatch] = useReducer(quizFormReducer, initialState);\n  const { breedNames } = breeds;\n  const breedsLoaded = breeds.breedNames.length > 0;\n\n  useEffect(() => {\n    const initCheckboxes: (breedNames: Array<string>) => void = (\n      breedNames: Array<string>\n    ) => {\n      const checkboxes = {};\n      breedNames.forEach(\n        breed => (checkboxes[breed.replace(/ /g, '-')] = true)\n      );\n\n      dispatch({ type: 'SET_CHECKBOXES', payload: { checkboxes } });\n    };\n\n    if (breedsLoaded) {\n      initCheckboxes(breedNames);\n    } else {\n      getBreeds();\n    }\n  }, [breedsLoaded, getBreeds, breedNames]);\n\n  const questionsChanged: (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: 'SET_QUESTION_NUMBER',\n      payload: { questionNumber: event.target.value },\n    });\n  };\n\n  const checkboxChanged: (breed: string, value: boolean) => void = (\n    breed: string,\n    value: boolean\n  ) => {\n    dispatch({\n      type: 'SET_CHECKBOX_MARK',\n      payload: { breed, value },\n    });\n  };\n\n  const checkAll: (checked: boolean) => void = (checked: boolean) => {\n    let checkboxes = {};\n    breeds.breedNames.forEach((breed: string) => {\n      const key = breed.replace(/ /g, '-');\n\n      checkboxes = {\n        ...checkboxes,\n        [key]: checked,\n      };\n    });\n\n    dispatch({ type: 'SET_CHECKBOXES', payload: { checkboxes } });\n  };\n\n  const submit: (event: FormEvent<HTMLFormElement>) => void = (\n    event: FormEvent<HTMLFormElement>\n  ) => {\n    event.preventDefault();\n\n    const checked: Array<string> = [];\n    Object.keys(state.checkboxes).forEach(box => {\n      if (state.checkboxes[box]) {\n        checked.push(box);\n      }\n    });\n    if (checked.length > 1) {\n      setOptions(Number(state.questions.elementConfig.value), checked);\n      history.push('/quiz/game');\n    } else {\n      dispatch({ type: 'SET_INVALID' });\n    }\n  };\n\n  const toggleHide: () => void = () => {\n    dispatch({ type: 'TOGGLE_HIDE' });\n  };\n\n  let breedCheckboxes: any;\n  const checkBoxesClasses = ['control'];\n  if (!state.showCheckboxes) {\n    checkBoxesClasses.push('d-none');\n  }\n\n  if (breeds.loading) {\n    breedCheckboxes = <Loading />;\n  } else if (breeds.error) {\n    breedCheckboxes = <ErrorMessage message={breeds.error} />;\n  } else if (Object.keys(state.checkboxes).length > 0) {\n    breedCheckboxes = (\n      <QuizCheckboxes\n        checkboxes={state.checkboxes}\n        changeValue={checkboxChanged}\n      />\n    );\n  }\n\n  const checkedCount = Object.keys(state.checkboxes).filter(val => {\n    return state.checkboxes[val];\n  });\n\n  return (\n    <form onSubmit={submit} action=\"#\">\n      <div className=\"field columns\">\n        <div className=\"control column is-narrow\">\n          <label htmlFor=\"questions\" className=\"label\">\n            Number of questions\n          </label>\n          <Input\n            elementType={state.questions.elementType}\n            elementConfig={{\n              ...state.questions.elementConfig,\n              onChange: questionsChanged,\n            }}\n            touched={state.questions.touched}\n          />\n        </div>\n      </div>\n\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <p className=\"label level-item\">\n            Select which breeds you want to test on ({checkedCount.length})\n          </p>\n          <ToggleHide\n            className=\"level-item\"\n            shown={state.showCheckboxes}\n            click={toggleHide}\n          />\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className={checkBoxesClasses.join(' ')}>{breedCheckboxes}</div>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            className=\"button is-link\"\n            type=\"button\"\n            onClick={() => checkAll(true)}\n          >\n            Select all\n          </button>\n        </div>\n        <div className=\"control\">\n          <button\n            className=\"button is-link\"\n            type=\"button\"\n            onClick={() => checkAll(false)}\n          >\n            Select none\n          </button>\n        </div>\n      </div>\n\n      {state.isValid ? null : (\n        <p className=\"notification is-warning\">\n          Please choose at least two breeds\n        </p>\n      )}\n\n      <div className=\"field\">\n        <div className=\"control has-text-centered\">\n          <button className=\"button is-medium is-link is-success\" type=\"submit\">\n            Start quiz\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default QuizForm;\n","export interface QuizState {\n  choices: Array<string>;\n  chosenAnswer: string;\n  numberOfCorrect: number;\n  correctAnswer: string;\n  errorMessage: string;\n  image: string;\n  loading: boolean;\n  questionCount: number;\n  selectedBreeds: Array<string>;\n  wasCorrect: boolean;\n  numberOfWrong: number;\n}\n\nexport const initialQuizState: QuizState = {\n  choices: [],\n  chosenAnswer: null,\n  numberOfCorrect: null,\n  correctAnswer: null,\n  errorMessage: null,\n  image: null,\n  loading: null,\n  questionCount: null,\n  selectedBreeds: [],\n  wasCorrect: null,\n  numberOfWrong: null,\n};\n\nexport const SET_OPTIONS = 'SET_OPTIONS';\nexport const NEXT_QUESTION = 'NEXT_QUESTION';\nexport const NEXT_QUESTION_SUCCESS = 'NEXT_QUESTION_SUCCESS';\nexport const NEXT_QUESTION_FAIL = 'NEXT_QUESTION_FAIL';\nexport const ANSWER = 'ANSWER';\nexport const RESTART = 'RESTART';\n\ninterface SetOptionsAction {\n  type: typeof SET_OPTIONS;\n  payload: {\n    questionCount: number;\n    selectedBreeds: Array<string>;\n  };\n}\n\ninterface NextQuestionAction {\n  type: typeof NEXT_QUESTION;\n}\n\ninterface NextQuestionSuccessAction {\n  type: typeof NEXT_QUESTION_SUCCESS;\n  payload: {\n    choices: Array<string>;\n    correctAnswer: string;\n    imageUrl: string;\n  };\n}\n\ninterface NextQuestionFailAction {\n  type: typeof NEXT_QUESTION_FAIL;\n  payload: {\n    errorMessage: string;\n  };\n}\n\ninterface AnswerAction {\n  type: typeof ANSWER;\n  payload: {\n    answer: string;\n  };\n}\n\ninterface RestartAction {\n  type: typeof RESTART;\n}\n\nexport type QuizActionTypes =\n  | SetOptionsAction\n  | NextQuestionAction\n  | NextQuestionSuccessAction\n  | NextQuestionFailAction\n  | AnswerAction\n  | RestartAction;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nexport interface AnswerButtonsProps {\n  choices: Array<string>;\n  chosenAnswer?: string;\n  click: (breed: string) => void;\n  correctAnswer?: string;\n}\n\nconst AnswerButtons: FunctionComponent<AnswerButtonsProps> = (\n  props: AnswerButtonsProps\n) => (\n  <Fragment>\n    {props.choices.map((breed: string) => {\n      const classNames = ['answer', 'button', 'is-medium', 'is-capitalized'];\n      if (props.chosenAnswer) {\n        if (breed === props.correctAnswer) {\n          classNames.push('is-success');\n        } else if (breed === props.chosenAnswer) {\n          classNames.push('is-danger');\n        } else {\n          classNames.push('is-info', 'is-outlined');\n        }\n      } else {\n        classNames.push('is-info');\n      }\n\n      return (\n        <button\n          key={breed}\n          className={classNames.join(' ')}\n          onClick={() => props.click(breed)}\n        >\n          {breed.replace(/-/g, ' ')}\n        </button>\n      );\n    })}\n  </Fragment>\n);\n\nAnswerButtons.defaultProps = {\n  choices: [],\n  click: () => null,\n};\n\nexport default AnswerButtons;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { FunctionComponent } from 'react';\nimport Loading from '../../Ui/Loading/Loading';\nimport './QuizImage.scss';\n\nexport interface QuizImageProps {\n  chosen?: string;\n  correct?: number;\n  gameEnd?: boolean;\n  image?: string;\n  nextQuestion: () => void;\n  restart: () => void;\n  wrong?: number;\n}\n\nconst QuizImage: FunctionComponent<QuizImageProps> = (\n  props: QuizImageProps\n) => {\n  if (props.image == null) {\n    return <Loading />;\n  }\n\n  let overlay: JSX.Element;\n  if (props.chosen) {\n    let button: JSX.Element;\n    if (props.gameEnd) {\n      const ratio = Math.round(\n        (props.correct / (props.correct + props.wrong)) * 100\n      );\n      button = (\n        <div className=\"has-text-centered\">\n          <div className=\"box has-shadow\">\n            <p className=\"has-text-weight-bold is-size-1\">{ratio}%</p>\n            <p className=\"has-text-success is-size-4\">\n              Correct: {props.correct}\n            </p>\n            <p className=\"has-text-danger is-size-4\">Wrong: {props.wrong}</p>\n          </div>\n          <button\n            aria-label=\"Restart\"\n            className=\"quiz-button\"\n            onClick={props.restart}\n          >\n            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n          </button>\n        </div>\n      );\n    } else {\n      button = (\n        <button\n          aria-label=\"Next\"\n          className=\"quiz-button quiz-next\"\n          onClick={props.nextQuestion}\n        >\n          <FontAwesomeIcon icon=\"chevron-right\" fixedWidth />\n        </button>\n      );\n    }\n    overlay = <div className=\"quiz-overlay\">{button}</div>;\n  }\n\n  return (\n    <figure className=\"image is-1by1 quiz-image-box next-question\">\n      <div\n        className=\"quiz-image-fill\"\n        style={{ backgroundImage: `url(${props.image})` }}\n      />\n      <div\n        className=\"quiz-image\"\n        style={{ backgroundImage: `url(${props.image})` }}\n      />\n\n      {overlay}\n    </figure>\n  );\n};\n\nexport default QuizImage;\n","import React, { FunctionComponent } from 'react';\n\nimport './QuizProgress.scss';\n\nexport interface QuizProgressProps {\n  correct: number;\n  questionCount: number;\n  wasCorrect: boolean;\n  wrong: number;\n}\n\nconst QuizProgress: FunctionComponent<QuizProgressProps> = (\n  props: QuizProgressProps\n) => {\n  const progress = ((props.correct + props.wrong) / props.questionCount) * 100;\n\n  const correctClasses = ['title', 'has-text-success'];\n  const wrongClasses = ['title', 'has-text-danger'];\n\n  switch (props.wasCorrect) {\n    case true:\n      correctClasses.push('answer-pop');\n      break;\n\n    case false:\n      wrongClasses.push('answer-pop');\n      break;\n\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"columns is-multiline\">\n      <div className=\"column is-half is-offset-one-quarter\">\n        <progress\n          className=\"progress is-primary\"\n          value={progress.toString()}\n          max=\"100\"\n        >\n          {progress}%\n        </progress>\n\n        <div className=\"level\">\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Correct</p>\n              <p className={correctClasses.join(' ')}>{props.correct}</p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Progress</p>\n              <p className=\"title\">\n                {props.correct + props.wrong}/{props.questionCount}\n              </p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">Wrong</p>\n              <p className={wrongClasses.join(' ')}>{props.wrong}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizProgress;\n","import React, { FunctionComponent, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport './QuizGame.scss';\nimport AnswerButtons from '../../../components/Quiz/AnswerButtons/AnswerButtons';\nimport QuizImage from '../../../components/Quiz/QuizImage/QuizImage';\nimport QuizProgress from '../../../components/Quiz/QuizProgress/QuizProgress';\nimport { answer, nextQuestion, restart } from '../../../store/quiz/actions';\nimport { AppState } from '../../../store';\n\nconst QuizGame: FunctionComponent = () => {\n  const quiz = useSelector((state: AppState) => state.quiz);\n\n  const dispatch = useDispatch();\n  const dispatchAnswer = (breed: string) => dispatch(answer(breed));\n  const { selectedBreeds } = quiz;\n  const dispatchNextQuestion = useCallback(\n    () => dispatch(nextQuestion(selectedBreeds)),\n    [dispatch, selectedBreeds]\n  );\n\n  const breedsLoaded = quiz.selectedBreeds.length > 0;\n\n  useEffect(() => {\n    if (breedsLoaded) {\n      dispatchNextQuestion();\n    }\n  }, [dispatchNextQuestion, breedsLoaded]);\n\n  const restartQuiz = useCallback(() => {\n    dispatch(restart());\n    dispatchNextQuestion();\n  }, [dispatch, dispatchNextQuestion]);\n\n  if (!quiz.questionCount || quiz.selectedBreeds.length < 2) {\n    return <Redirect to=\"/quiz\" />;\n  }\n\n  const buttonClick = (breed: string) => {\n    if (quiz.numberOfCorrect + quiz.numberOfWrong === +quiz.questionCount) {\n      return;\n    }\n\n    if (quiz.chosenAnswer) {\n      dispatchNextQuestion();\n    } else {\n      dispatchAnswer(breed);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"columns\">\n        <div className=\"box column is-half is-offset-one-quarter\">\n          <QuizImage\n            chosen={quiz.chosenAnswer}\n            correct={quiz.numberOfCorrect}\n            gameEnd={\n              quiz.numberOfCorrect + quiz.numberOfWrong === +quiz.questionCount\n            }\n            image={quiz.image}\n            nextQuestion={dispatchNextQuestion}\n            restart={restartQuiz}\n            wrong={quiz.numberOfWrong}\n          />\n\n          <div\n            className={\n              quiz.choices.length === 3 ? 'answers answers-vertical' : 'answers'\n            }\n          >\n            <AnswerButtons\n              choices={quiz.choices}\n              chosenAnswer={quiz.chosenAnswer}\n              click={buttonClick}\n              correctAnswer={quiz.correctAnswer}\n            />\n          </div>\n        </div>\n      </div>\n\n      <QuizProgress\n        correct={quiz.numberOfCorrect}\n        questionCount={quiz.questionCount}\n        wrong={quiz.numberOfWrong}\n        wasCorrect={quiz.wasCorrect}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default QuizGame;\n","import React, { FunctionComponent } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Section from '../../components/Ui/Section/Section';\nimport QuizForm from '../../containers/Quiz/QuizForm/QuizForm';\nimport QuizGame from '../../containers/Quiz/QuizGame/QuizGame';\n\nconst Quiz: FunctionComponent<any> = () => {\n  return (\n    <Section>\n      <Switch>\n        <Route path=\"/quiz/game\">\n          <QuizGame />\n        </Route>\n        <Route path=\"/quiz\" exact>\n          <QuizForm />\n        </Route>\n      </Switch>\n    </Section>\n  );\n};\n\nexport default Quiz;\n","import { Route, Switch } from 'react-router-dom';\nimport React, { FunctionComponent } from 'react';\n\nimport './App.scss';\n\nimport About from './components/About/About';\nimport BreedInfo from './containers/BreedInfo/BreedInfo';\nimport BreedList from './containers/BreedList/BreedList';\nimport Footer from './components/Ui/Footer/Footer';\nimport Nav from './components/Ui/Nav/Nav';\nimport Quiz from './components/Quiz/Quiz';\nimport Section from './components/Ui/Section/Section';\n\nconst App: FunctionComponent = () => (\n  <div className=\"main\">\n    <Nav />\n    <Switch>\n      <Route path=\"/about\">\n        <About />\n      </Route>\n      <Route path=\"/quiz\">\n        <Quiz />\n      </Route>\n      <Route path=\"/breed/:breed/:sub?\">\n        <BreedInfo />\n      </Route>\n      <Route path=\"\" exact>\n        <BreedList />\n      </Route>\n      <Route>\n        <Section>\n          <h1 className=\"title\">Page not found</h1>\n        </Section>\n      </Route>\n    </Switch>\n    <Footer />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  BreedState,\n  BreedActionTypes,\n  GET_BREEDS,\n  GET_BREEDS_SUCCESS,\n  GET_BREEDS_FAIL,\n} from './types';\n\nconst initialState: Partial<BreedState> = {\n  breedNames: [],\n  breeds: {},\n  error: null,\n  loading: false,\n};\n\nexport const breedReducer = (\n  state: Partial<BreedState> = initialState,\n  action: BreedActionTypes\n) => {\n  switch (action.type) {\n    case GET_BREEDS:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n      };\n\n    case GET_BREEDS_SUCCESS: {\n      const breedNames: Array<string> = [];\n      for (let breed in action.payload.breeds) {\n        if (action.payload.breeds[breed].length === 0) {\n          breedNames.push(breed.toLowerCase());\n        } else {\n          breedNames.push(\n            ...action.payload.breeds[breed].map(\n              (sub: string) => sub.toLowerCase() + ' ' + breed.toLowerCase()\n            )\n          );\n        }\n      }\n      return {\n        ...state,\n        breedNames: breedNames.sort(),\n        breeds: action.payload.breeds,\n        error: null,\n        loading: false,\n      };\n    }\n\n    case GET_BREEDS_FAIL:\n      return {\n        ...state,\n        error: action.payload.errorMessage,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  QuizState,\n  QuizActionTypes,\n  SET_OPTIONS,\n  NEXT_QUESTION,\n  NEXT_QUESTION_SUCCESS,\n  NEXT_QUESTION_FAIL,\n  ANSWER,\n  RESTART,\n} from './types';\n\nconst initialState: QuizState = {\n  choices: [],\n  chosenAnswer: null,\n  numberOfCorrect: 0,\n  correctAnswer: null,\n  errorMessage: null,\n  image: null,\n  loading: false,\n  questionCount: 0,\n  selectedBreeds: [],\n  wasCorrect: null,\n  numberOfWrong: 0,\n};\n\nexport const quizReducer = (\n  state: QuizState = initialState,\n  action: QuizActionTypes\n) => {\n  switch (action.type) {\n    case SET_OPTIONS:\n      return {\n        ...state,\n        numberOfCorrect: 0,\n        errorMessage: null,\n        image: null,\n        loading: false,\n        questionCount: action.payload.questionCount,\n        selectedBreeds: action.payload.selectedBreeds,\n        numberOfWrong: 0,\n      };\n\n    case NEXT_QUESTION:\n      return {\n        ...state,\n        choices: [],\n        chosenAnswer: null,\n        correctAnswer: null,\n        errorMessage: null,\n        image: null,\n        loading: true,\n        wasCorrect: null,\n      };\n\n    case NEXT_QUESTION_SUCCESS:\n      return {\n        ...state,\n        choices: action.payload.choices.sort(),\n        correctAnswer: action.payload.correctAnswer,\n        errorMessage: null,\n        image: action.payload.imageUrl,\n        loading: false,\n      };\n\n    case NEXT_QUESTION_FAIL:\n      return {\n        ...state,\n        errorMessage: action.payload.errorMessage,\n        loading: false,\n      };\n\n    case ANSWER:\n      return {\n        ...state,\n        chosenAnswer: action.payload.answer,\n        numberOfCorrect:\n          action.payload.answer === state.correctAnswer\n            ? state.numberOfCorrect + 1\n            : state.numberOfCorrect,\n        wasCorrect: action.payload.answer === state.correctAnswer,\n        numberOfWrong:\n          action.payload.answer === state.correctAnswer\n            ? state.numberOfWrong\n            : state.numberOfWrong + 1,\n      };\n\n    case RESTART:\n      return {\n        ...state,\n        choices: [],\n        chosenAnswer: null,\n        numberOfCorrect: 0,\n        correctAnswer: null,\n        numberOfWrong: 0,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { breedReducer } from './breed/reducers';\nimport { quizReducer } from './quiz/reducers';\n\nconst rootReducer = combineReducers({\n  breeds: breedReducer,\n  quiz: quizReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst configureStore = () => {\n  const composeEnhancers =\n    process.env.NODE_ENV === 'development'\n      ? (window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose)\n      : compose;\n\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './shared/fontAwesome';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nconst app = (\n  <Provider store={store}>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}